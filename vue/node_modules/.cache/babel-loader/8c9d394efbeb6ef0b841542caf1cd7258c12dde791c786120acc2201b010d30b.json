{"ast":null,"code":"import request from \"@/utils/request\";\nexport default {\n  name: \"currentBorrow\",\n  props: [\"account\"],\n  data() {\n    return {\n      borrowedBooks: [] // 存储借阅记录\n    };\n  },\n  methods: {\n    // 获取借阅记录\n    async fetchBorrowedBooks() {\n      try {\n        const res = await request.get(`/User/ListByAccount/${this.account}`);\n        if (res.code === \"200\") {\n          this.borrowedBooks = res.data;\n        } else {\n          this.$message.error(\"加载借阅记录失败\");\n        }\n      } catch {\n        this.$message.error(\"加载借阅记录失败\");\n      }\n    },\n    // 格式化日期\n    formatDate(row, column, cellValue) {\n      if (!cellValue) return \"未归还\";\n      const options = {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n      };\n      return new Date(cellValue).toLocaleDateString(\"zh-CN\", options);\n    },\n    // 计算积分，假设每借阅一天积1分\n    calculateScore(row) {\n      const currentDate = new Date();\n      const dueDate = new Date(row.dueDate);\n      const createDate = new Date(row.createtime);\n      // 如果尚未归还，计算从创建到当前的天数\n      const timeDifference = row.dueDate ? dueDate - createDate : currentDate - createDate;\n      const days = Math.floor(timeDifference / (1000 * 3600 * 24)); // 转换为天数\n      return days >= 0 ? days : 0; // 确保积分不为负数\n    },\n    // 获取借书状态\n    getStatusText(dueDate) {\n      const currentDate = new Date();\n      const due = new Date(dueDate);\n      const timeDifference = due - currentDate;\n      if (timeDifference < 0) {\n        return \"逾期\"; // 如果到期时间在当前时间之前，则逾期\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\n        return \"即将到期\"; // 如果到期时间在未来3天内，则显示快到期\n      } else {\n        return \"未到期\"; // 否则，表示未到期\n      }\n    },\n    // 获取状态的样式\n    getStatusStyle(dueDate) {\n      const currentDate = new Date();\n      const due = new Date(dueDate);\n      const timeDifference = due - currentDate;\n      if (timeDifference < 0) {\n        return \"color: red;\"; // 逾期时使用红色\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\n        return \"color: orange;\"; // 快到期时使用橙色\n      } else {\n        return \"color: green;\"; // 未到期时使用绿色\n      }\n    }\n  },\n  created() {\n    this.fetchBorrowedBooks();\n  }\n};","map":{"version":3,"names":["request","name","props","data","borrowedBooks","methods","fetchBorrowedBooks","res","get","account","code","$message","error","formatDate","row","column","cellValue","options","year","month","day","Date","toLocaleDateString","calculateScore","currentDate","dueDate","createDate","createtime","timeDifference","days","Math","floor","getStatusText","due","getStatusStyle","created"],"sources":["src/views/user/CurrentBorrow.vue"],"sourcesContent":["<template>\r\n  <div class=\"borrowed-books\">\r\n    <h1>借阅记录</h1>\r\n    <el-table :data=\"borrowedBooks\" border style=\"width: 100%\">\r\n      <el-table-column prop=\"id\" label=\"记录ID\" width=\"80\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"书名\"></el-table-column>\r\n      <el-table-column prop=\"bookNo\" label=\"书籍编号\"></el-table-column>\r\n      <el-table-column prop=\"username\" label=\"借阅人\"></el-table-column>\r\n      <el-table-column prop=\"account\" label=\"账号\"></el-table-column>\r\n      <el-table-column prop=\"phone\" label=\"联系电话\"></el-table-column>\r\n      <el-table-column\r\n          prop=\"dueDate\"\r\n          label=\"归还日期\"\r\n          :formatter=\"formatDate\"\r\n      ></el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <template slot-scope=\"scope\">\r\n          <span :style=\"getStatusStyle(scope.row.dueDate)\">\r\n            {{ getStatusText(scope.row.dueDate) }}\r\n          </span>\r\n        </template>\r\n      </el-table-column>\r\n      <!-- 计算积分，假设每借阅一天积1分 -->\r\n      <el-table-column label=\"积分\" width=\"100\">\r\n        <template slot-scope=\"scope\">\r\n          {{ calculateScore(scope.row) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          prop=\"createtime\"\r\n          label=\"创建时间\"\r\n          :formatter=\"formatDate\"\r\n      ></el-table-column>\r\n      <el-table-column\r\n          prop=\"updatetime\"\r\n          label=\"更新时间\"\r\n          :formatter=\"formatDate\"\r\n      ></el-table-column>\r\n    </el-table>\r\n\r\n    <div v-if=\"borrowedBooks.length === 0\" class=\"no-data\">\r\n      <p>暂无借阅记录。</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nexport default {\r\n  name: \"currentBorrow\",\r\n  props: [\"account\"],\r\n  data() {\r\n    return {\r\n      borrowedBooks: [], // 存储借阅记录\r\n    };\r\n  },\r\n  methods: {\r\n    // 获取借阅记录\r\n    async fetchBorrowedBooks() {\r\n      try {\r\n        const res = await request.get(`/User/ListByAccount/${this.account}`);\r\n        if (res.code === \"200\") {\r\n          this.borrowedBooks = res.data;\r\n        } else {\r\n          this.$message.error(\"加载借阅记录失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"加载借阅记录失败\");\r\n      }\r\n    },\r\n\r\n    // 格式化日期\r\n    formatDate(row, column, cellValue) {\r\n      if (!cellValue) return \"未归还\";\r\n      const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\r\n      return new Date(cellValue).toLocaleDateString(\"zh-CN\", options);\r\n    },\r\n\r\n    // 计算积分，假设每借阅一天积1分\r\n    calculateScore(row) {\r\n      const currentDate = new Date();\r\n      const dueDate = new Date(row.dueDate);\r\n      const createDate = new Date(row.createtime);\r\n      // 如果尚未归还，计算从创建到当前的天数\r\n      const timeDifference = row.dueDate ? dueDate - createDate : currentDate - createDate;\r\n      const days = Math.floor(timeDifference / (1000 * 3600 * 24)); // 转换为天数\r\n      return days >= 0 ? days : 0; // 确保积分不为负数\r\n    },\r\n\r\n    // 获取借书状态\r\n    getStatusText(dueDate) {\r\n      const currentDate = new Date();\r\n      const due = new Date(dueDate);\r\n      const timeDifference = due - currentDate;\r\n\r\n      if (timeDifference < 0) {\r\n        return \"逾期\";  // 如果到期时间在当前时间之前，则逾期\r\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\r\n        return \"即将到期\";  // 如果到期时间在未来3天内，则显示快到期\r\n      } else {\r\n        return \"未到期\";  // 否则，表示未到期\r\n      }\r\n    },\r\n\r\n    // 获取状态的样式\r\n    getStatusStyle(dueDate) {\r\n      const currentDate = new Date();\r\n      const due = new Date(dueDate);\r\n      const timeDifference = due - currentDate;\r\n\r\n      if (timeDifference < 0) {\r\n        return \"color: red;\";  // 逾期时使用红色\r\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\r\n        return \"color: orange;\";  // 快到期时使用橙色\r\n      } else {\r\n        return \"color: green;\";  // 未到期时使用绿色\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchBorrowedBooks();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AA+CA,OAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,mBAAA;MACA;QACA,MAAAC,GAAA,SAAAP,OAAA,CAAAQ,GAAA,6BAAAC,OAAA;QACA,IAAAF,GAAA,CAAAG,IAAA;UACA,KAAAN,aAAA,GAAAG,GAAA,CAAAJ,IAAA;QACA;UACA,KAAAQ,QAAA,CAAAC,KAAA;QACA;MACA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IAEA;IACAC,WAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;MACA,KAAAA,SAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,WAAAC,IAAA,CAAAL,SAAA,EAAAM,kBAAA,UAAAL,OAAA;IACA;IAEA;IACAM,eAAAT,GAAA;MACA,MAAAU,WAAA,OAAAH,IAAA;MACA,MAAAI,OAAA,OAAAJ,IAAA,CAAAP,GAAA,CAAAW,OAAA;MACA,MAAAC,UAAA,OAAAL,IAAA,CAAAP,GAAA,CAAAa,UAAA;MACA;MACA,MAAAC,cAAA,GAAAd,GAAA,CAAAW,OAAA,GAAAA,OAAA,GAAAC,UAAA,GAAAF,WAAA,GAAAE,UAAA;MACA,MAAAG,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,cAAA;MACA,OAAAC,IAAA,QAAAA,IAAA;IACA;IAEA;IACAG,cAAAP,OAAA;MACA,MAAAD,WAAA,OAAAH,IAAA;MACA,MAAAY,GAAA,OAAAZ,IAAA,CAAAI,OAAA;MACA,MAAAG,cAAA,GAAAK,GAAA,GAAAT,WAAA;MAEA,IAAAI,cAAA;QACA;MACA,WAAAA,cAAA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAM,eAAAT,OAAA;MACA,MAAAD,WAAA,OAAAH,IAAA;MACA,MAAAY,GAAA,OAAAZ,IAAA,CAAAI,OAAA;MACA,MAAAG,cAAA,GAAAK,GAAA,GAAAT,WAAA;MAEA,IAAAI,cAAA;QACA;MACA,WAAAA,cAAA;QACA;MACA;QACA;MACA;IACA;EACA;EACAO,QAAA;IACA,KAAA7B,kBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}