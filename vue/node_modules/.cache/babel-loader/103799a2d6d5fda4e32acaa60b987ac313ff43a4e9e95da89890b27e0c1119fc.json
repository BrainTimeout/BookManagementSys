{"ast":null,"code":"import request from \"@/utils/request\"; // 假设你使用的是 axios\n\nexport default {\n  name: 'UserManage',\n  data() {\n    return {\n      tableData: [],\n      // 数据\n      total: 0,\n      // 总条数\n      params: {\n        pageNum: 1,\n        // 当前页\n        pageSize: 12 // 每页条数\n      },\n      searchParams: {\n        userid: \"\",\n        // 用户ID\n        account: \"\",\n        // 账户\n        username: \"\" // 用户名\n      }\n    };\n  },\n  watch: {\n    // 监听分页参数的变化，自动加载数据\n    'params.pageNum'(newPage) {\n      this.load();\n    },\n    'params.pageSize'(newSize) {\n      this.load();\n    }\n  },\n  methods: {\n    // 搜索方法\n    handleSearch() {\n      // 将搜索条件更新到params中\n      this.params.pageNum = 1; // 搜索时重置到第一页\n      this.load();\n    },\n    async load() {\n      try {\n        // 将分页参数和搜索条件传递给后端\n        const searchParams = {\n          ...this.params,\n          ...this.searchParams\n        };\n        const res = await request.get('/user/InfoPage', {\n          params: searchParams\n        });\n        if (res.code === '200') {\n          this.tableData = res.data.list;\n          this.total = res.data.total;\n        } else {\n          this.$message.error('加载数据失败');\n        }\n      } catch (error) {\n        this.$message.error('加载数据失败');\n      }\n    },\n    handlePageChange(page) {\n      this.params.pageNum = page; // 更新当前页\n      this.load(); // 页码变化时加载数据\n    }\n  },\n  created() {\n    this.load(); // 初始加载数据\n  }\n};","map":{"version":3,"names":["request","name","data","tableData","total","params","pageNum","pageSize","searchParams","userid","account","username","watch","params.pageNum","newPage","load","params.pageSize","newSize","methods","handleSearch","res","get","code","list","$message","error","handlePageChange","page","created"],"sources":["src/views/user/UserManage.vue"],"sourcesContent":["<template>\r\n  <div class=\"table-container\">\r\n    <!-- 搜索框 -->\r\n    <div class=\"search-box\">\r\n      <el-input\r\n          v-model=\"searchParams.userid\"\r\n          placeholder=\"请输入用户ID\"\r\n          clearable\r\n          style=\"width: 200px; margin-right: 10px;\"\r\n      ></el-input>\r\n      <el-input\r\n          v-model=\"searchParams.account\"\r\n          placeholder=\"请输入账户\"\r\n          clearable\r\n          style=\"width: 200px; margin-right: 10px;\"\r\n      ></el-input>\r\n      <el-input\r\n          v-model=\"searchParams.username\"\r\n          placeholder=\"请输入用户名\"\r\n          clearable\r\n          style=\"width: 200px; margin-right: 10px;\"\r\n      ></el-input>\r\n      <el-button type=\"primary\" @click=\"handleSearch\" style=\"height: 38px;\">搜索</el-button>\r\n    </div>\r\n\r\n    <!-- 表格 -->\r\n    <el-table :data=\"tableData\" stripe>\r\n      <el-table-column prop=\"userid\" label=\"用户ID\" />\r\n      <el-table-column prop=\"account\" label=\"账户\" />\r\n      <el-table-column prop=\"username\" label=\"用户名\" />\r\n      <el-table-column prop=\"age\" label=\"年龄\" />\r\n      <el-table-column prop=\"sex\" label=\"性别\" />\r\n      <el-table-column prop=\"address\" label=\"地址\" />\r\n      <el-table-column prop=\"phone\" label=\"电话\" />\r\n\r\n      <!-- 更多列 -->\r\n      <el-table-column label=\"更多\">\r\n        <template v-slot=\"scope\">\r\n          <el-dropdown trigger=\"click\">\r\n            <span class=\"el-dropdown-link\">\r\n              更多\r\n            </span>\r\n            <el-dropdown-menu slot=\"dropdown\">\r\n              <el-dropdown-item>\r\n                <strong>创建时间：</strong>{{ scope.row.creatime }}\r\n              </el-dropdown-item>\r\n              <el-dropdown-item>\r\n                <strong>更新时间：</strong>{{ scope.row.updatetime }}\r\n              </el-dropdown-item>\r\n              <el-dropdown-item>\r\n                <strong>简介：</strong>{{ scope.row.introduce || '暂无简介' }}\r\n              </el-dropdown-item>\r\n              <el-dropdown-item>\r\n                <strong>邮箱：</strong>{{ scope.row.email || '暂无邮箱' }}\r\n              </el-dropdown-item>\r\n            </el-dropdown-menu>\r\n          </el-dropdown>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页 -->\r\n    <el-pagination\r\n        :current-page=\"params.pageNum\"\r\n        :page-size=\"params.pageSize\"\r\n        :total=\"total\"\r\n        @current-change=\"handlePageChange\"\r\n        layout=\"total, prev, pager, next, jumper\"\r\n        class=\"pagination\"\r\n    />\r\n\r\n    <!-- 空数据提示 -->\r\n    <div v-if=\"tableData.length === 0\" class=\"no-data\">\r\n      <p>没有找到相关数据</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";  // 假设你使用的是 axios\r\n\r\nexport default {\r\n  name: 'UserManage',\r\n  data() {\r\n    return {\r\n      tableData: [],  // 数据\r\n      total: 0,  // 总条数\r\n      params: {\r\n        pageNum: 1,  // 当前页\r\n        pageSize: 12,  // 每页条数\r\n      },\r\n      searchParams: {\r\n        userid: \"\",   // 用户ID\r\n        account: \"\",  // 账户\r\n        username: \"\", // 用户名\r\n      },\r\n    };\r\n  },\r\n  watch: {\r\n    // 监听分页参数的变化，自动加载数据\r\n    'params.pageNum'(newPage) {\r\n      this.load();\r\n    },\r\n    'params.pageSize'(newSize) {\r\n      this.load();\r\n    },\r\n  },\r\n  methods: {\r\n    // 搜索方法\r\n    handleSearch() {\r\n      // 将搜索条件更新到params中\r\n      this.params.pageNum = 1;  // 搜索时重置到第一页\r\n      this.load();\r\n    },\r\n\r\n    async load() {\r\n      try {\r\n        // 将分页参数和搜索条件传递给后端\r\n        const searchParams = { ...this.params, ...this.searchParams };\r\n\r\n        const res = await request.get('/user/InfoPage', { params: searchParams });\r\n\r\n        if (res.code === '200') {\r\n          this.tableData = res.data.list;\r\n          this.total = res.data.total;\r\n        } else {\r\n          this.$message.error('加载数据失败');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('加载数据失败');\r\n      }\r\n    },\r\n\r\n    handlePageChange(page) {\r\n      this.params.pageNum = page;  // 更新当前页\r\n      this.load();  // 页码变化时加载数据\r\n    },\r\n  },\r\n  created() {\r\n    this.load();  // 初始加载数据\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table-container {\r\n  padding: 10px;\r\n}\r\n\r\n.search-box {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #888;\r\n}\r\n\r\n.el-dropdown-link {\r\n  cursor: pointer;\r\n  color: #409EFF;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"AA+EA,OAAAA,OAAA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,KAAA;MAAA;MACAC,MAAA;QACAC,OAAA;QAAA;QACAC,QAAA;MACA;MACAC,YAAA;QACAC,MAAA;QAAA;QACAC,OAAA;QAAA;QACAC,QAAA;MACA;IACA;EACA;EACAC,KAAA;IACA;IACA,gBAAAC,CAAAC,OAAA;MACA,KAAAC,IAAA;IACA;IACA,iBAAAC,CAAAC,OAAA;MACA,KAAAF,IAAA;IACA;EACA;EACAG,OAAA;IACA;IACAC,aAAA;MACA;MACA,KAAAd,MAAA,CAAAC,OAAA;MACA,KAAAS,IAAA;IACA;IAEA,MAAAA,KAAA;MACA;QACA;QACA,MAAAP,YAAA;UAAA,QAAAH,MAAA;UAAA,QAAAG;QAAA;QAEA,MAAAY,GAAA,SAAApB,OAAA,CAAAqB,GAAA;UAAAhB,MAAA,EAAAG;QAAA;QAEA,IAAAY,GAAA,CAAAE,IAAA;UACA,KAAAnB,SAAA,GAAAiB,GAAA,CAAAlB,IAAA,CAAAqB,IAAA;UACA,KAAAnB,KAAA,GAAAgB,GAAA,CAAAlB,IAAA,CAAAE,KAAA;QACA;UACA,KAAAoB,QAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IAEAC,iBAAAC,IAAA;MACA,KAAAtB,MAAA,CAAAC,OAAA,GAAAqB,IAAA;MACA,KAAAZ,IAAA;IACA;EACA;EACAa,QAAA;IACA,KAAAb,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}