{"ast":null,"code":"import request from \"@/utils/request\";\nexport default {\n  name: \"currentBorrow\",\n  props: [\"account\"],\n  data() {\n    return {\n      borrowedBooks: [] // 存储借阅记录\n    };\n  },\n  methods: {\n    // 获取借阅记录\n    async fetchBorrowedBooks() {\n      try {\n        const res = await request.get(`/User/ListByAccount/${this.account}`);\n        if (res.code === \"200\") {\n          this.borrowedBooks = res.data;\n        } else {\n          this.$message.error(\"加载借阅记录失败\");\n        }\n      } catch {\n        this.$message.error(\"加载借阅记录失败\");\n      }\n    },\n    // 格式化日期\n    formatDate(row, column, cellValue) {\n      if (!cellValue) return \"未归还\";\n      const options = {\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n      };\n      return new Date(cellValue).toLocaleDateString(\"zh-CN\", options);\n    },\n    // 计算借阅天数\n    calculateDays(row) {\n      const borrowDate = new Date(row.borrowDate); // 假设借阅日期存储在 borrowDate 字段\n      const dueDate = new Date(row.dueDate);\n      const diffTime = dueDate - borrowDate;\n      const diffDays = diffTime / (1000 * 3600 * 24); // 将时间差转换为天数\n      return diffDays > 0 ? diffDays : 0; // 如果借阅日期比归还日期晚，显示 0\n    },\n    // 获取借书状态\n    getStatusText(dueDate) {\n      const currentDate = new Date();\n      const due = new Date(dueDate);\n      const timeDifference = due - currentDate;\n      if (timeDifference < 0) {\n        return \"逾期\"; // 如果到期时间在当前时间之前，则逾期\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\n        return \"即将到期\"; // 如果到期时间在未来3天内，则显示快到期\n      } else {\n        return \"未到期\"; // 否则，表示未到期\n      }\n    },\n    // 获取状态的样式\n    getStatusStyle(dueDate) {\n      const currentDate = new Date();\n      const due = new Date(dueDate);\n      const timeDifference = due - currentDate;\n      if (timeDifference < 0) {\n        return \"color: red;\"; // 逾期时使用红色\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\n        return \"color: orange;\"; // 快到期时使用橙色\n      } else {\n        return \"color: green;\"; // 未到期时使用绿色\n      }\n    },\n    // 计算积分，假设每借阅一天积1分\n    calculateScore(row) {\n      const score = row.score || 0; // 假设 `score` 是借阅记录中的属性\n      const days = row.days || 0; // 假设 `days` 是借阅记录中的属性（表示借书天数）\n      return score * days; // 积分 = score * days\n    }\n  },\n  created() {\n    this.fetchBorrowedBooks();\n  }\n};","map":{"version":3,"names":["request","name","props","data","borrowedBooks","methods","fetchBorrowedBooks","res","get","account","code","$message","error","formatDate","row","column","cellValue","options","year","month","day","Date","toLocaleDateString","calculateDays","borrowDate","dueDate","diffTime","diffDays","getStatusText","currentDate","due","timeDifference","getStatusStyle","calculateScore","score","days","created"],"sources":["src/views/user/CurrentBorrow.vue"],"sourcesContent":["<template>\r\n  <div class=\"borrowed-books\">\r\n    <h1>借阅记录</h1>\r\n    <el-table :data=\"borrowedBooks\" border style=\"width: 100%\">\r\n      <el-table-column prop=\"id\" label=\"记录ID\" width=\"80\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"书名\"></el-table-column>\r\n      <el-table-column prop=\"bookNo\" label=\"书籍编号\"></el-table-column>\r\n      <el-table-column prop=\"username\" label=\"借阅人\"></el-table-column>\r\n      <el-table-column prop=\"account\" label=\"账号\"></el-table-column>\r\n      <el-table-column prop=\"phone\" label=\"联系电话\"></el-table-column>\r\n      <el-table-column prop=\"dueDate\" label=\"归还日期\" :formatter=\"formatDate\"></el-table-column>\r\n      <el-table-column prop=\"days\" label=\"借阅天数\"></el-table-column>\r\n      <el-table-column label=\"状态\">\r\n        <template slot-scope=\"scope\">\r\n          <span :style=\"getStatusStyle(scope.row.dueDate)\">\r\n            {{ getStatusText(scope.row.dueDate) }}\r\n          </span>\r\n        </template>\r\n      </el-table-column>\r\n      <!-- 计算积分 -->\r\n      <el-table-column label=\"积分\" width=\"100\">\r\n        <template slot-scope=\"scope\">\r\n          {{ calculateScore(scope.row) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"createtime\" label=\"创建时间\" :formatter=\"formatDate\"></el-table-column>\r\n      <el-table-column prop=\"updatetime\" label=\"更新时间\" :formatter=\"formatDate\"></el-table-column>\r\n    </el-table>\r\n\r\n    <div v-if=\"borrowedBooks.length === 0\" class=\"no-data\">\r\n      <p>暂无借阅记录。</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nexport default {\r\n  name: \"currentBorrow\",\r\n  props: [\"account\"],\r\n  data() {\r\n    return {\r\n      borrowedBooks: [], // 存储借阅记录\r\n    };\r\n  },\r\n  methods: {\r\n    // 获取借阅记录\r\n    async fetchBorrowedBooks() {\r\n      try {\r\n        const res = await request.get(`/User/ListByAccount/${this.account}`);\r\n        if (res.code === \"200\") {\r\n          this.borrowedBooks = res.data;\r\n        } else {\r\n          this.$message.error(\"加载借阅记录失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"加载借阅记录失败\");\r\n      }\r\n    },\r\n\r\n    // 格式化日期\r\n    formatDate(row, column, cellValue) {\r\n      if (!cellValue) return \"未归还\";\r\n      const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\r\n      return new Date(cellValue).toLocaleDateString(\"zh-CN\", options);\r\n    },\r\n\r\n    // 计算借阅天数\r\n    calculateDays(row) {\r\n      const borrowDate = new Date(row.borrowDate); // 假设借阅日期存储在 borrowDate 字段\r\n      const dueDate = new Date(row.dueDate);\r\n      const diffTime = dueDate - borrowDate;\r\n      const diffDays = diffTime / (1000 * 3600 * 24); // 将时间差转换为天数\r\n      return diffDays > 0 ? diffDays : 0; // 如果借阅日期比归还日期晚，显示 0\r\n    },\r\n\r\n    // 获取借书状态\r\n    getStatusText(dueDate) {\r\n      const currentDate = new Date();\r\n      const due = new Date(dueDate);\r\n      const timeDifference = due - currentDate;\r\n\r\n      if (timeDifference < 0) {\r\n        return \"逾期\";  // 如果到期时间在当前时间之前，则逾期\r\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\r\n        return \"即将到期\";  // 如果到期时间在未来3天内，则显示快到期\r\n      } else {\r\n        return \"未到期\";  // 否则，表示未到期\r\n      }\r\n    },\r\n\r\n    // 获取状态的样式\r\n    getStatusStyle(dueDate) {\r\n      const currentDate = new Date();\r\n      const due = new Date(dueDate);\r\n      const timeDifference = due - currentDate;\r\n\r\n      if (timeDifference < 0) {\r\n        return \"color: red;\";  // 逾期时使用红色\r\n      } else if (timeDifference <= 3 * 24 * 60 * 60 * 1000) {\r\n        return \"color: orange;\";  // 快到期时使用橙色\r\n      } else {\r\n        return \"color: green;\";  // 未到期时使用绿色\r\n      }\r\n    },\r\n\r\n    // 计算积分，假设每借阅一天积1分\r\n    calculateScore(row) {\r\n      const score = row.score || 0;  // 假设 `score` 是借阅记录中的属性\r\n      const days = row.days || 0;    // 假设 `days` 是借阅记录中的属性（表示借书天数）\r\n      return score * days;  // 积分 = score * days\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchBorrowedBooks();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.borrowed-books {\r\n  padding: 20px;\r\n}\r\n.no-data {\r\n  margin-top: 20px;\r\n  font-size: 16px;\r\n  color: #666;\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":"AAoCA,OAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,mBAAA;MACA;QACA,MAAAC,GAAA,SAAAP,OAAA,CAAAQ,GAAA,6BAAAC,OAAA;QACA,IAAAF,GAAA,CAAAG,IAAA;UACA,KAAAN,aAAA,GAAAG,GAAA,CAAAJ,IAAA;QACA;UACA,KAAAQ,QAAA,CAAAC,KAAA;QACA;MACA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IAEA;IACAC,WAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;MACA,KAAAA,SAAA;MACA,MAAAC,OAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,WAAAC,IAAA,CAAAL,SAAA,EAAAM,kBAAA,UAAAL,OAAA;IACA;IAEA;IACAM,cAAAT,GAAA;MACA,MAAAU,UAAA,OAAAH,IAAA,CAAAP,GAAA,CAAAU,UAAA;MACA,MAAAC,OAAA,OAAAJ,IAAA,CAAAP,GAAA,CAAAW,OAAA;MACA,MAAAC,QAAA,GAAAD,OAAA,GAAAD,UAAA;MACA,MAAAG,QAAA,GAAAD,QAAA;MACA,OAAAC,QAAA,OAAAA,QAAA;IACA;IAEA;IACAC,cAAAH,OAAA;MACA,MAAAI,WAAA,OAAAR,IAAA;MACA,MAAAS,GAAA,OAAAT,IAAA,CAAAI,OAAA;MACA,MAAAM,cAAA,GAAAD,GAAA,GAAAD,WAAA;MAEA,IAAAE,cAAA;QACA;MACA,WAAAA,cAAA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAC,eAAAP,OAAA;MACA,MAAAI,WAAA,OAAAR,IAAA;MACA,MAAAS,GAAA,OAAAT,IAAA,CAAAI,OAAA;MACA,MAAAM,cAAA,GAAAD,GAAA,GAAAD,WAAA;MAEA,IAAAE,cAAA;QACA;MACA,WAAAA,cAAA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAE,eAAAnB,GAAA;MACA,MAAAoB,KAAA,GAAApB,GAAA,CAAAoB,KAAA;MACA,MAAAC,IAAA,GAAArB,GAAA,CAAAqB,IAAA;MACA,OAAAD,KAAA,GAAAC,IAAA;IACA;EACA;EACAC,QAAA;IACA,KAAA9B,kBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}