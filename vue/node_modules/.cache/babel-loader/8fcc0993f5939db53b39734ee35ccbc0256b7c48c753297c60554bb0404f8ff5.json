{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport * as echarts from 'echarts';\nimport request from \"@/utils/request\";\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      borrowData: [],\n      // 存储借书数据\n      revertData: [],\n      // 存储还书数据\n      dates: [],\n      // 存储日期\n      allBorrowData: [],\n      // 存储所有借书数据\n      allRevertData: [],\n      // 存储所有还书数据\n      selectedRange: 'week' // 默认选择最近一周\n    };\n  },\n  mounted() {\n    this.fetchData(); // 获取借书和还书数据\n  },\n  methods: {\n    // 获取数据\n    async fetchData() {\n      try {\n        const borrowResponse = await request.get(\"/Borrow/List\"); // 获取借书数据\n        const revertResponse = await request.get(\"/Borrow/RevertList\"); // 获取还书数据\n\n        this.allBorrowData = borrowResponse.data; // 存储所有借书数据\n        this.allRevertData = revertResponse.data; // 存储所有还书数据\n\n        // 处理数据\n        this.filterData();\n      } catch (error) {\n        console.error(\"数据获取失败：\", error);\n      }\n    },\n    // 根据日期范围过滤数据\n    filterData() {\n      const filteredBorrowData = this.filterByDateRange(this.allBorrowData);\n      const filteredRevertData = this.filterByDateRange(this.allRevertData);\n\n      // 处理过滤后的数据\n      this.borrowData = this.processData(filteredBorrowData, 'createtime');\n      this.revertData = this.processData(filteredRevertData, 'revertDate');\n      this.dates = this.extractDates(filteredBorrowData, filteredRevertData);\n      this.initChart(); // 数据过滤后初始化图表\n    },\n    // 根据日期范围过滤数据\n    filterByDateRange(data) {\n      const today = new Date();\n      const dateLimit = new Date();\n\n      // 根据选择的日期范围进行筛选\n      switch (this.selectedRange) {\n        case 'week':\n          dateLimit.setDate(today.getDate() - 7); // 最近一周\n          break;\n        case 'month':\n          dateLimit.setMonth(today.getMonth() - 1); // 最近一个月\n          break;\n        case 'year':\n          dateLimit.setFullYear(today.getFullYear() - 1); // 最近一年\n          break;\n        default:\n          dateLimit.setDate(today.getDate() - 7);\n        // 默认是最近一周\n      }\n\n      // 过滤掉在日期范围之外的数据\n      return data.filter(item => {\n        const itemDate = new Date(item.createtime.split(' ')[0]); // 获取借书日期\n        return itemDate >= dateLimit;\n      });\n    },\n    // 处理数据：统计每个日期的借书或还书数量\n    processData(data, dateField) {\n      const dateCount = {};\n      data.forEach(item => {\n        const date = item[dateField].split(' ')[0]; // 提取日期部分\n        dateCount[date] = (dateCount[date] || 0) + 1; // 每个日期加1\n      });\n      return Object.values(dateCount); // 返回每个日期的借书/还书数量\n    },\n    // 提取所有日期：从借书和还书数据中提取出所有日期\n    extractDates(borrowData, revertData) {\n      const dates = new Set();\n      borrowData.forEach(item => dates.add(item.createtime.split(' ')[0]));\n      revertData.forEach(item => dates.add(item.revertDate.split(' ')[0]));\n      return Array.from(dates).sort(); // 返回排序后的日期数组\n    },\n    // 初始化图表\n    initChart() {\n      const chartDom = document.getElementById('main');\n      const myChart = echarts.init(chartDom);\n\n      // 设置图表的配置项\n      const option = {\n        title: {\n          text: '图书借还统计',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['借书', '还书'],\n          top: '10px'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: this.dates // 使用提取的日期数据\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: '借书',\n          type: 'line',\n          data: this.borrowData // 使用借书数据\n        }, {\n          name: '还书',\n          type: 'line',\n          data: this.revertData // 使用还书数据\n        }]\n      };\n      myChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["echarts","request","name","data","borrowData","revertData","dates","allBorrowData","allRevertData","selectedRange","mounted","fetchData","methods","borrowResponse","get","revertResponse","filterData","error","console","filteredBorrowData","filterByDateRange","filteredRevertData","processData","extractDates","initChart","today","Date","dateLimit","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","filter","item","itemDate","createtime","split","dateField","dateCount","forEach","date","Object","values","Set","add","revertDate","Array","from","sort","chartDom","document","getElementById","myChart","init","option","title","text","left","tooltip","trigger","legend","top","grid","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","type","boundaryGap","yAxis","series","setOption"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 日期范围选择器 -->\r\n    <div class=\"date-selector\">\r\n      <label for=\"dateRange\" class=\"label\">选择日期范围: </label>\r\n      <select id=\"dateRange\" v-model=\"selectedRange\" @change=\"filterData\" class=\"select\">\r\n        <option value=\"week\">最近一周</option>\r\n        <option value=\"month\">最近一个月</option>\r\n        <option value=\"year\">最近一年</option>\r\n      </select>\r\n    </div>\r\n\r\n    <!-- 图表容器 -->\r\n    <div id=\"main\" class=\"chart-container\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport request from \"@/utils/request\";\r\n\r\nexport default {\r\n  name: 'Home',\r\n  data() {\r\n    return {\r\n      borrowData: [],  // 存储借书数据\r\n      revertData: [],  // 存储还书数据\r\n      dates: [],  // 存储日期\r\n      allBorrowData: [],  // 存储所有借书数据\r\n      allRevertData: [],  // 存储所有还书数据\r\n      selectedRange: 'week',  // 默认选择最近一周\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchData();  // 获取借书和还书数据\r\n  },\r\n  methods: {\r\n    // 获取数据\r\n    async fetchData() {\r\n      try {\r\n        const borrowResponse = await request.get(\"/Borrow/List\");  // 获取借书数据\r\n        const revertResponse = await request.get(\"/Borrow/RevertList\");  // 获取还书数据\r\n\r\n        this.allBorrowData = borrowResponse.data;  // 存储所有借书数据\r\n        this.allRevertData = revertResponse.data;  // 存储所有还书数据\r\n\r\n        // 处理数据\r\n        this.filterData();\r\n      } catch (error) {\r\n        console.error(\"数据获取失败：\", error);\r\n      }\r\n    },\r\n\r\n    // 根据日期范围过滤数据\r\n    filterData() {\r\n      const filteredBorrowData = this.filterByDateRange(this.allBorrowData);\r\n      const filteredRevertData = this.filterByDateRange(this.allRevertData);\r\n\r\n      // 处理过滤后的数据\r\n      this.borrowData = this.processData(filteredBorrowData, 'createtime');\r\n      this.revertData = this.processData(filteredRevertData, 'revertDate');\r\n      this.dates = this.extractDates(filteredBorrowData, filteredRevertData);\r\n\r\n      this.initChart();  // 数据过滤后初始化图表\r\n    },\r\n\r\n    // 根据日期范围过滤数据\r\n    filterByDateRange(data) {\r\n      const today = new Date();\r\n      const dateLimit = new Date();\r\n\r\n      // 根据选择的日期范围进行筛选\r\n      switch (this.selectedRange) {\r\n        case 'week':\r\n          dateLimit.setDate(today.getDate() - 7);  // 最近一周\r\n          break;\r\n        case 'month':\r\n          dateLimit.setMonth(today.getMonth() - 1);  // 最近一个月\r\n          break;\r\n        case 'year':\r\n          dateLimit.setFullYear(today.getFullYear() - 1);  // 最近一年\r\n          break;\r\n        default:\r\n          dateLimit.setDate(today.getDate() - 7);  // 默认是最近一周\r\n      }\r\n\r\n      // 过滤掉在日期范围之外的数据\r\n      return data.filter(item => {\r\n        const itemDate = new Date(item.createtime.split(' ')[0]);  // 获取借书日期\r\n        return itemDate >= dateLimit;\r\n      });\r\n    },\r\n\r\n    // 处理数据：统计每个日期的借书或还书数量\r\n    processData(data, dateField) {\r\n      const dateCount = {};\r\n      data.forEach(item => {\r\n        const date = item[dateField].split(' ')[0];  // 提取日期部分\r\n        dateCount[date] = (dateCount[date] || 0) + 1;  // 每个日期加1\r\n      });\r\n      return Object.values(dateCount);  // 返回每个日期的借书/还书数量\r\n    },\r\n\r\n    // 提取所有日期：从借书和还书数据中提取出所有日期\r\n    extractDates(borrowData, revertData) {\r\n      const dates = new Set();\r\n      borrowData.forEach(item => dates.add(item.createtime.split(' ')[0]));\r\n      revertData.forEach(item => dates.add(item.revertDate.split(' ')[0]));\r\n      return Array.from(dates).sort();  // 返回排序后的日期数组\r\n    },\r\n\r\n    // 初始化图表\r\n    initChart() {\r\n      const chartDom = document.getElementById('main');\r\n      const myChart = echarts.init(chartDom);\r\n\r\n      // 设置图表的配置项\r\n      const option = {\r\n        title: {\r\n          text: '图书借还统计',\r\n          left: 'center',\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: ['借书', '还书'],\r\n          top: '10px',\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: this.dates  // 使用提取的日期数据\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            name: '借书',\r\n            type: 'line',\r\n            data: this.borrowData  // 使用借书数据\r\n          },\r\n          {\r\n            name: '还书',\r\n            type: 'line',\r\n            data: this.revertData  // 使用还书数据\r\n          }\r\n        ]\r\n      };\r\n\r\n      myChart.setOption(option);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 主要容器 */\r\n.container {\r\n  width: 100%;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 日期范围选择器样式 */\r\n.date-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.label {\r\n  margin-right: 10px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n}\r\n\r\n.select {\r\n  padding: 5px 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 图表容器 */\r\n.chart-container {\r\n  width: 100%;\r\n  height: 600px;\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}