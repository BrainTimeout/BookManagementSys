{"ast":null,"code":"import request from \"@/utils/request\";\nexport default {\n  name: \"AccountManage\",\n  data() {\n    return {\n      tableData: [],\n      // 用户数据\n      total: 0,\n      params: {\n        pageNum: 1,\n        pageSize: 8\n      },\n      filters: {\n        account: \"\",\n        usertype: \"\"\n      },\n      autoSearch: false,\n      editPasswordDialogVisible: false,\n      // 修改密码对话框是否显示\n      editPasswordForm: {\n        password: \"\",\n        confirmPassword: \"\"\n      },\n      selectedUser: null // 当前正在修改密码的用户\n    };\n  },\n  watch: {\n    \"params.pageNum\": \"load\",\n    \"params.pageSize\": \"load\"\n  },\n  methods: {\n    // 打开修改密码对话框\n    openEditPasswordDialog(user) {\n      this.selectedUser = user; // 记录当前用户\n      this.editPasswordForm.password = \"\";\n      this.editPasswordForm.confirmPassword = \"\";\n      this.editPasswordDialogVisible = true;\n    },\n    // 保存修改后的密码\n    async savePassword() {\n      if (this.editPasswordForm.password !== this.editPasswordForm.confirmPassword) {\n        this.$message.error(\"两次输入的密码不一致！\");\n        return;\n      }\n\n      // 调用 API 更新密码\n      try {\n        const res = await request.put(`/Accounts/UpdatePassword/${this.selectedUser.account}`, {\n          password: this.editPasswordForm.password\n        });\n        if (res.code === \"200\") {\n          this.$message.success(\"密码修改成功！\");\n          this.editPasswordDialogVisible = false;\n          this.load(); // 刷新数据\n        } else {\n          this.$message.error(\"密码修改失败：\" + res.msg);\n        }\n      } catch (error) {\n        this.$message.error(\"密码修改失败：\" + error.message);\n      }\n    },\n    // 保存封禁状态\n    async saveEdit() {\n      try {\n        const res = await request.put(\"/Accounts/Update\", this.editForm);\n        if (res.code === \"200\") {\n          this.$message.success(\"用户信息已更新！\");\n          this.load();\n        } else {\n          this.$message.error(res.msg);\n        }\n      } catch {\n        this.$message.error(\"用户信息更新失败\");\n      }\n    },\n    // 删除用户\n    async deleteUser() {\n      try {\n        const res = await request.delete(`/Accounts/Delete/${this.deleteUserAccount}`);\n        if (res.code === \"200\") {\n          this.$message.success(\"用户已删除！\");\n          this.load();\n          this.deleteDialogVisible = false;\n        } else {\n          this.$message.error(\"删除失败\");\n        }\n      } catch {\n        this.$message.error(\"删除失败\");\n        this.deleteDialogVisible = false;\n      }\n    },\n    // 加载数据\n    async load() {\n      try {\n        const res = await request.get(\"/Accounts/Page\", {\n          params: {\n            ...this.params,\n            ...this.filters\n          }\n        });\n        if (res.code === \"200\") {\n          this.tableData = res.data.list;\n          this.total = res.data.total;\n        } else {\n          this.$message.error(\"加载数据失败\");\n        }\n      } catch {\n        this.$message.error(\"加载数据失败\");\n      }\n    },\n    // 格式化日期\n    formatDate(date) {\n      const d = new Date(date);\n      return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')} ${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}:${d.getSeconds().toString().padStart(2, '0')}`;\n    },\n    // 获取用户类型\n    getUserType(type) {\n      return type === 'admin' ? '管理员' : '普通用户';\n    }\n  },\n  created() {\n    this.load();\n  }\n};","map":{"version":3,"names":["request","name","data","tableData","total","params","pageNum","pageSize","filters","account","usertype","autoSearch","editPasswordDialogVisible","editPasswordForm","password","confirmPassword","selectedUser","watch","methods","openEditPasswordDialog","user","savePassword","$message","error","res","put","code","success","load","msg","message","saveEdit","editForm","deleteUser","delete","deleteUserAccount","deleteDialogVisible","get","list","formatDate","date","d","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","getUserType","type","created"],"sources":["src/views/user/AccountManage.vue"],"sourcesContent":["<template>\r\n  <div class=\"table-container\">\r\n    <!-- 筛选条件 -->\r\n    <el-row class=\"filter-row\" type=\"flex\" align=\"middle\">\r\n      <el-input v-model=\"filters.account\" placeholder=\"账户\" class=\"filter-input\" @input=\"handleInput\" />\r\n      <el-select v-model=\"filters.usertype\" placeholder=\"用户类型\" class=\"filter-input\" @input=\"handleInput\">\r\n        <el-option label=\"管理员\" value=\"admin\" />\r\n        <el-option label=\"普通用户\" value=\"user\" />\r\n      </el-select>\r\n    </el-row>\r\n\r\n    <!-- 按钮组 -->\r\n    <el-row class=\"button-row\">\r\n      <el-switch v-model=\"autoSearch\" @change=\"handleSearch\" />\r\n      <span class=\"auto-search-text\">自动搜索</span>\r\n      <div class=\"search-buttons\">\r\n        <el-button type=\"primary\" @click=\"handleSearch\" class=\"btn-spacing\">搜索</el-button>\r\n        <el-button type=\"warning\" @click=\"handleReset\" class=\"btn-spacing\">重置</el-button>\r\n      </div>\r\n    </el-row>\r\n\r\n    <!-- 表格 -->\r\n    <el-table :data=\"tableData\" stripe @row-click=\"handleRowClick\">\r\n      <el-table-column prop=\"account\" label=\"账户\" />\r\n      <el-table-column label=\"用户类型\">\r\n        <template slot-scope=\"scope\">\r\n          <span>{{ getUserType(scope.row.usertype) }}</span>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <!-- 密码列：图标点击打开修改密码对话框 -->\r\n      <el-table-column label=\"密码\" width=\"100\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" circle @click=\"openEditPasswordDialog(scope.row)\" />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <!-- 封禁状态列 -->\r\n      <el-table-column label=\"封禁状态\">\r\n        <template slot-scope=\"scope\">\r\n          <span v-if=\"new Date(scope.row.banuntil) > new Date()\">\r\n            已封禁，{{ formatDate(scope.row.banuntil) }}解禁\r\n          </span>\r\n          <span v-else>未封禁</span>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <!-- 删除操作 -->\r\n      <el-table-column label=\"\" width=\"60\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" circle @click.stop=\"handleDelete(scope.row)\" />\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页 -->\r\n    <el-pagination\r\n        :current-page=\"params.pageNum\"\r\n        :page-size=\"params.pageSize\"\r\n        :total=\"total\"\r\n        @current-change=\"handlePageChange\"\r\n        layout=\"total, prev, pager, next, jumper\"\r\n        class=\"pagination\"\r\n    />\r\n\r\n    <!-- 修改封禁状态对话框 -->\r\n    <el-dialog title=\"修改封禁状态\" :visible.sync=\"editDialogVisible\" width=\"50%\" class=\"edit-dialog\">\r\n      <el-form-item label=\"封禁截止时间\">\r\n        <el-date-picker\r\n            v-model=\"editForm.banuntil\"\r\n            type=\"datetime\"\r\n            placeholder=\"请选择封禁截止时间\"\r\n            format=\"yyyy-MM-dd HH:mm:ss\"\r\n            style=\"width: 100%\"\r\n        />\r\n      </el-form-item>\r\n      <!-- 快捷选项按钮 -->\r\n      <div class=\"quick-actions\">\r\n        <el-button @click=\"setImmediateUnban\" type=\"success\" size=\"mini\" plain>立刻解禁</el-button>\r\n        <el-button @click=\"setBanFor10Days\" type=\"danger\" size=\"mini\" plain>封禁10天</el-button>\r\n      </div>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveEdit\">保存</el-button>\r\n      </span>\r\n    </el-dialog>\r\n\r\n    <!-- 修改密码对话框 -->\r\n    <el-dialog title=\"修改密码\" :visible.sync=\"editPasswordDialogVisible\" width=\"40%\" class=\"edit-password-dialog\">\r\n      <el-form :model=\"editPasswordForm\" ref=\"passwordForm\">\r\n        <el-form-item label=\"新密码\" :rules=\"[{ required: true, message: '请输入新密码', trigger: 'blur' }]\">\r\n          <el-input v-model=\"editPasswordForm.password\" type=\"password\" placeholder=\"请输入新密码\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"确认密码\" :rules=\"[{ required: true, message: '请确认密码', trigger: 'blur' }]\">\r\n          <el-input v-model=\"editPasswordForm.confirmPassword\" type=\"password\" placeholder=\"请确认新密码\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editPasswordDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"savePassword\">保存</el-button>\r\n      </span>\r\n    </el-dialog>\r\n\r\n    <!-- 删除用户对话框 -->\r\n    <el-dialog title=\"删除用户\" :visible.sync=\"deleteDialogVisible\" width=\"30%\">\r\n      <p>确定要删除该用户吗？</p>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"danger\" @click=\"deleteUser\">确定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nexport default {\r\n  name: \"AccountManage\",\r\n  data() {\r\n    return {\r\n      tableData: [],  // 用户数据\r\n      total: 0,\r\n      params: {\r\n        pageNum: 1,\r\n        pageSize: 8,\r\n      },\r\n      filters: {\r\n        account: \"\",\r\n        usertype: \"\",\r\n      },\r\n      autoSearch: false,\r\n      editPasswordDialogVisible: false, // 修改密码对话框是否显示\r\n      editPasswordForm: {\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n      },\r\n      selectedUser: null, // 当前正在修改密码的用户\r\n    };\r\n  },\r\n  watch: {\r\n    \"params.pageNum\": \"load\",\r\n    \"params.pageSize\": \"load\",\r\n  },\r\n  methods: {\r\n    // 打开修改密码对话框\r\n    openEditPasswordDialog(user) {\r\n      this.selectedUser = user; // 记录当前用户\r\n      this.editPasswordForm.password = \"\";\r\n      this.editPasswordForm.confirmPassword = \"\";\r\n      this.editPasswordDialogVisible = true;\r\n    },\r\n\r\n    // 保存修改后的密码\r\n    async savePassword() {\r\n      if (this.editPasswordForm.password !== this.editPasswordForm.confirmPassword) {\r\n        this.$message.error(\"两次输入的密码不一致！\");\r\n        return;\r\n      }\r\n\r\n      // 调用 API 更新密码\r\n      try {\r\n        const res = await request.put(`/Accounts/UpdatePassword/${this.selectedUser.account}`, {\r\n          password: this.editPasswordForm.password,\r\n        });\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"密码修改成功！\");\r\n          this.editPasswordDialogVisible = false;\r\n          this.load();  // 刷新数据\r\n        } else {\r\n          this.$message.error(\"密码修改失败：\" + res.msg);\r\n        }\r\n      } catch (error) {\r\n        this.$message.error(\"密码修改失败：\" + error.message);\r\n      }\r\n    },\r\n\r\n    // 保存封禁状态\r\n    async saveEdit() {\r\n      try {\r\n        const res = await request.put(\"/Accounts/Update\", this.editForm);\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"用户信息已更新！\");\r\n          this.load();\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      } catch {\r\n        this.$message.error(\"用户信息更新失败\");\r\n      }\r\n    },\r\n\r\n    // 删除用户\r\n    async deleteUser() {\r\n      try {\r\n        const res = await request.delete(`/Accounts/Delete/${this.deleteUserAccount}`);\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"用户已删除！\");\r\n          this.load();\r\n          this.deleteDialogVisible = false;\r\n        } else {\r\n          this.$message.error(\"删除失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"删除失败\");\r\n        this.deleteDialogVisible = false;\r\n      }\r\n    },\r\n\r\n    // 加载数据\r\n    async load() {\r\n      try {\r\n        const res = await request.get(\"/Accounts/Page\", {\r\n          params: { ...this.params, ...this.filters },\r\n        });\r\n        if (res.code === \"200\") {\r\n          this.tableData = res.data.list;\r\n          this.total = res.data.total;\r\n        } else {\r\n          this.$message.error(\"加载数据失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"加载数据失败\");\r\n      }\r\n    },\r\n\r\n    // 格式化日期\r\n    formatDate(date) {\r\n      const d = new Date(date);\r\n      return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')} ${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}:${d.getSeconds().toString().padStart(2, '0')}`;\r\n    },\r\n\r\n    // 获取用户类型\r\n    getUserType(type) {\r\n      return type === 'admin' ? '管理员' : '普通用户';\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.load();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table-container {\r\n  padding: 10px;\r\n}\r\n\r\n.filter-row {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-input {\r\n  width: 150px;\r\n}\r\n\r\n.button-row {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.auto-search-text {\r\n  font-size: 14px;\r\n  color: #333;\r\n  margin-right: 10px;\r\n}\r\n\r\n.search-buttons {\r\n  display: flex;\r\n  gap: 3px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #888;\r\n}\r\n\r\n.el-dropdown {\r\n  margin-right: 10px;\r\n}\r\n\r\n.el-dialog .el-form-item {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.quick-actions {\r\n  margin-top: 10px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}