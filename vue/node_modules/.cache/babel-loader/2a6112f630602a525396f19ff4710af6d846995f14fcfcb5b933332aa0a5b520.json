{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nimport Cookies from 'js-cookie';\nexport default {\n  props: [\"id\"],\n  // 从父组件接收书籍 ID\n  data() {\n    return {\n      book: null,\n      comments: [],\n      // 存储评论列表\n      newComment: \"\",\n      // 新评论内容\n      loading: false,\n      account: \"\",\n      username: \"\",\n      defaultCover: \"https://via.placeholder.com/300x400?text=No+Image\" // 默认图片占位符\n    };\n  },\n  methods: {\n    async loadBook() {\n      if (!this.id) {\n        this.$message.error(\"无效的书籍 ID\");\n        this.goBack();\n        return;\n      }\n      this.loading = true;\n      try {\n        const res = await request.get(`/User/${this.id}`);\n        if (res.code === \"200\") {\n          this.book = res.data;\n        } else {\n          this.$message.error(\"加载书籍信息失败\");\n        }\n      } catch {\n        this.$message.error(\"加载书籍信息失败\");\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadComments() {\n      try {\n        const res = await request.get(`/User/Comment/${this.book.bookNo}`);\n        if (res.code === \"200\") {\n          this.comments = res.data || [];\n        } else {\n          this.$message.error(\"加载评论失败\");\n        }\n      } catch {\n        this.$message.error(\"加载评论失败\");\n      }\n    },\n    async addComment() {\n      if (!this.newComment.trim()) {\n        this.$message.warning(\"评论内容不能为空\");\n        return;\n      }\n      if (!this.account) {\n        this.$message.warning(\"请先登录\");\n        return;\n      }\n      try {\n        const res = await request.post(`/User/PostComment`, {\n          bookNo: this.book.bookNo,\n          content: this.newComment,\n          username: this.username,\n          account: this.account\n        });\n        if (res.code === \"200\") {\n          this.$message.success(\"评论成功\");\n          this.newComment = \"\";\n          this.comments.push({\n            account: userAccount,\n            // 添加新评论的用户信息\n            content: this.newComment\n          });\n        } else {\n          this.$message.error(\"评论失败\");\n        }\n      } catch {\n        this.$message.error(\"评论失败\");\n      }\n    },\n    goBack() {\n      this.$router.push({\n        name: \"bookShow\"\n      });\n    }\n  },\n  created() {\n    this.loadBook();\n    const authInfo = Cookies.get('authInfo');\n    if (authInfo) {\n      const authInfo = JSON.parse(authInfo); // cookie中存储的是JSON字符串\n      this.account = authInfo.userProfile.account || {};\n      this.username = authInfo.userProfile.username || {};\n    }\n  }\n};","map":{"version":3,"names":["request","Cookies","props","data","book","comments","newComment","loading","account","username","defaultCover","methods","loadBook","id","$message","error","goBack","res","get","code","loadComments","bookNo","addComment","trim","warning","post","content","success","push","userAccount","$router","name","created","authInfo","JSON","parse","userProfile"],"sources":["src/views/book/Detail.vue"],"sourcesContent":["<template>\r\n  <div class=\"book-detail\">\r\n    <!-- 返回按钮 -->\r\n    <el-button type=\"primary\" @click=\"goBack\" class=\"back-button\">返回书籍列表</el-button>\r\n\r\n    <!-- 加载状态 -->\r\n    <el-loading v-if=\"loading\" class=\"loading-overlay\" fullscreen lock text=\"加载中...\" />\r\n\r\n    <!-- 展示书籍详细信息 -->\r\n    <div v-else-if=\"book\" class=\"book-info\">\r\n      <h1>{{ book.name }}</h1>\r\n      <p><strong>描述:</strong> {{ book.description || \"暂无描述\" }}</p>\r\n      <p><strong>作者:</strong> {{ book.author || \"未知\" }}</p>\r\n      <img :src=\"book.cover || defaultCover\" alt=\"书籍封面\" class=\"book-cover\" />\r\n\r\n      <!-- 评论部分 -->\r\n      <div class=\"comments\">\r\n        <h2>评论</h2>\r\n        <div v-if=\"comments.length\" class=\"comment-list\">\r\n          <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment-item\">\r\n            <p><strong>用户 {{ comment.account }}:</strong> {{ comment.content }}</p>\r\n          </div>\r\n        </div>\r\n        <div v-else class=\"no-comments\">暂无评论</div>\r\n\r\n        <!-- 添加评论 -->\r\n        <div class=\"add-comment\">\r\n          <el-input\r\n              type=\"textarea\"\r\n              v-model=\"newComment\"\r\n              placeholder=\"输入你的评论\"\r\n              rows=\"3\"\r\n          ></el-input>\r\n          <el-button\r\n              type=\"primary\"\r\n              @click=\"addComment\"\r\n              :disabled=\"!newComment.trim()\"\r\n          >\r\n            提交评论\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 错误提示 -->\r\n    <div v-else class=\"error-message\">\r\n      <p>书籍信息加载失败或书籍不存在。</p>\r\n      <el-button type=\"warning\" @click=\"goBack\">返回</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport default {\r\n  props: [\"id\"], // 从父组件接收书籍 ID\r\n  data() {\r\n    return {\r\n      book: null,\r\n      comments: [], // 存储评论列表\r\n      newComment: \"\", // 新评论内容\r\n      loading: false,\r\n      account:\"\",\r\n      username:\"\",\r\n      defaultCover: \"https://via.placeholder.com/300x400?text=No+Image\", // 默认图片占位符\r\n    };\r\n  },\r\n  methods: {\r\n    async loadBook() {\r\n      if (!this.id) {\r\n        this.$message.error(\"无效的书籍 ID\");\r\n        this.goBack();\r\n        return;\r\n      }\r\n      this.loading = true;\r\n      try {\r\n        const res = await request.get(`/User/${this.id}`);\r\n        if (res.code === \"200\") {\r\n          this.book = res.data;\r\n        } else {\r\n          this.$message.error(\"加载书籍信息失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"加载书籍信息失败\");\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async loadComments() {\r\n      try {\r\n        const res = await request.get(`/User/Comment/${this.book.bookNo}`);\r\n        if (res.code === \"200\") {\r\n          this.comments = res.data || [];\r\n        } else {\r\n          this.$message.error(\"加载评论失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"加载评论失败\");\r\n      }\r\n    },\r\n    async addComment() {\r\n      if (!this.newComment.trim()) {\r\n        this.$message.warning(\"评论内容不能为空\");\r\n        return;\r\n      }\r\n      if (!this.account) {\r\n        this.$message.warning(\"请先登录\");\r\n        return;\r\n      }\r\n      try {\r\n        const res = await request.post(`/User/PostComment`, {\r\n          bookNo: this.book.bookNo,\r\n          content: this.newComment,\r\n          username: this.username,\r\n          account: this.account,\r\n        });\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"评论成功\");\r\n          this.newComment = \"\";\r\n          this.comments.push({\r\n            account: userAccount, // 添加新评论的用户信息\r\n            content: this.newComment,\r\n          });\r\n        } else {\r\n          this.$message.error(\"评论失败\");\r\n        }\r\n      } catch {\r\n        this.$message.error(\"评论失败\");\r\n      }\r\n    },\r\n\r\n    goBack() {\r\n      this.$router.push({ name: \"bookShow\" });\r\n    },\r\n  },\r\n  created() {\r\n    this.loadBook();\r\n    const authInfo = Cookies.get('authInfo');\r\n    if (authInfo) {\r\n      const authInfo = JSON.parse(authInfo); // cookie中存储的是JSON字符串\r\n      this.account = authInfo.userProfile.account || {};\r\n      this.username = authInfo.userProfile.username || {};\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.book-detail {\r\n  padding: 20px;\r\n}\r\n.comments {\r\n  margin-top: 30px;\r\n}\r\n.comment-list {\r\n  margin-top: 10px;\r\n  padding-left: 10px;\r\n}\r\n.comment-item {\r\n  margin-bottom: 10px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  padding-bottom: 5px;\r\n}\r\n.add-comment {\r\n  margin-top: 20px;\r\n}\r\n.add-comment textarea {\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAqDA,OAAAA,OAAA;AACA,OAAAC,OAAA;AAEA;EACAC,KAAA;EAAA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,QAAA;MAAA;MACAC,UAAA;MAAA;MACAC,OAAA;MACAC,OAAA;MACAC,QAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,SAAA;MACA,UAAAC,EAAA;QACA,KAAAC,QAAA,CAAAC,KAAA;QACA,KAAAC,MAAA;QACA;MACA;MACA,KAAAT,OAAA;MACA;QACA,MAAAU,GAAA,SAAAjB,OAAA,CAAAkB,GAAA,eAAAL,EAAA;QACA,IAAAI,GAAA,CAAAE,IAAA;UACA,KAAAf,IAAA,GAAAa,GAAA,CAAAd,IAAA;QACA;UACA,KAAAW,QAAA,CAAAC,KAAA;QACA;MACA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;QACA,KAAAR,OAAA;MACA;IACA;IAEA,MAAAa,aAAA;MACA;QACA,MAAAH,GAAA,SAAAjB,OAAA,CAAAkB,GAAA,uBAAAd,IAAA,CAAAiB,MAAA;QACA,IAAAJ,GAAA,CAAAE,IAAA;UACA,KAAAd,QAAA,GAAAY,GAAA,CAAAd,IAAA;QACA;UACA,KAAAW,QAAA,CAAAC,KAAA;QACA;MACA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IACA,MAAAO,WAAA;MACA,UAAAhB,UAAA,CAAAiB,IAAA;QACA,KAAAT,QAAA,CAAAU,OAAA;QACA;MACA;MACA,UAAAhB,OAAA;QACA,KAAAM,QAAA,CAAAU,OAAA;QACA;MACA;MACA;QACA,MAAAP,GAAA,SAAAjB,OAAA,CAAAyB,IAAA;UACAJ,MAAA,OAAAjB,IAAA,CAAAiB,MAAA;UACAK,OAAA,OAAApB,UAAA;UACAG,QAAA,OAAAA,QAAA;UACAD,OAAA,OAAAA;QACA;QACA,IAAAS,GAAA,CAAAE,IAAA;UACA,KAAAL,QAAA,CAAAa,OAAA;UACA,KAAArB,UAAA;UACA,KAAAD,QAAA,CAAAuB,IAAA;YACApB,OAAA,EAAAqB,WAAA;YAAA;YACAH,OAAA,OAAApB;UACA;QACA;UACA,KAAAQ,QAAA,CAAAC,KAAA;QACA;MACA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IAEAC,OAAA;MACA,KAAAc,OAAA,CAAAF,IAAA;QAAAG,IAAA;MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAApB,QAAA;IACA,MAAAqB,QAAA,GAAAhC,OAAA,CAAAiB,GAAA;IACA,IAAAe,QAAA;MACA,MAAAA,QAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAF,QAAA;MACA,KAAAzB,OAAA,GAAAyB,QAAA,CAAAG,WAAA,CAAA5B,OAAA;MACA,KAAAC,QAAA,GAAAwB,QAAA,CAAAG,WAAA,CAAA3B,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}