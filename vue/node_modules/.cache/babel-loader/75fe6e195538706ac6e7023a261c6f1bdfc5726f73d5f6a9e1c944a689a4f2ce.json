{"ast":null,"code":"import request from \"@/utils/request\"; // 假设你使用的是 axios\n\nexport default {\n  name: 'UserManage',\n  data() {\n    return {\n      tableData: [],\n      // 数据\n      total: 0,\n      // 总条数\n      params: {\n        pageNum: 1,\n        // 当前页\n        pageSize: 12 // 每页条数\n      },\n      searchQuery: \"\" // 搜索关键词\n    };\n  },\n  watch: {\n    // 监听分页参数的变化，自动加载数据\n    'params.pageNum'(newPage) {\n      this.load();\n    },\n    'params.pageSize'(newSize) {\n      this.load();\n    },\n    // 监听搜索关键词变化\n    'searchQuery'(newQuery) {\n      this.params.pageNum = 1; // 搜索时重置到第一页\n      this.load();\n    }\n  },\n  methods: {\n    // 加载数据\n    async load() {\n      try {\n        const searchParams = {\n          ...this.params,\n          searchQuery: this.searchQuery // 将搜索条件加入请求\n        };\n        console.log('请求参数:', searchParams); // 查看请求参数\n\n        const res = await request.get('/user/InfoPage', {\n          params: searchParams\n        });\n        if (res.code === '200') {\n          this.tableData = res.data.list;\n          this.total = res.data.total;\n        } else {\n          this.$message.error('加载数据失败');\n        }\n      } catch (error) {\n        this.$message.error('加载数据失败');\n      }\n    },\n    // 分页变化处理\n    handlePageChange(page) {\n      this.params.pageNum = page; // 更新当前页\n    },\n    // 清除搜索框时触发\n    handleSearchClear() {\n      this.searchQuery = \"\"; // 清空搜索框\n    },\n    // 搜索时触发\n    handleSearch() {\n      this.params.pageNum = 1; // 搜索时重置到第一页\n      this.load();\n    }\n  },\n  created() {\n    this.load(); // 初始加载数据\n  }\n};","map":{"version":3,"names":["request","name","data","tableData","total","params","pageNum","pageSize","searchQuery","watch","params.pageNum","newPage","load","params.pageSize","newSize","newQuery","methods","searchParams","console","log","res","get","code","list","$message","error","handlePageChange","page","handleSearchClear","handleSearch","created"],"sources":["src/views/user/UserManage.vue"],"sourcesContent":["<template>\r\n  <div class=\"table-container\">\r\n    <!-- 搜索框 -->\r\n    <el-input\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"请输入搜索关键词\"\r\n        suffix-icon=\"el-icon-search\"\r\n        clearable\r\n        @clear=\"handleSearchClear\"\r\n        @input=\"handleSearch\"\r\n        style=\"margin-bottom: 20px; width: 300px;\"\r\n    ></el-input>\r\n\r\n    <!-- 表格 -->\r\n    <el-table :data=\"tableData\" stripe>\r\n      <el-table-column prop=\"userid\" label=\"用户ID\" />\r\n      <el-table-column prop=\"account\" label=\"账户\" />\r\n      <el-table-column prop=\"username\" label=\"用户名\" />\r\n      <el-table-column prop=\"age\" label=\"年龄\" />\r\n      <el-table-column prop=\"sex\" label=\"性别\" />\r\n      <el-table-column prop=\"address\" label=\"地址\" />\r\n      <el-table-column prop=\"phone\" label=\"电话\" />\r\n\r\n      <!-- 更多列 -->\r\n      <el-table-column label=\"更多\">\r\n        <template v-slot=\"scope\">\r\n          <el-dropdown trigger=\"click\">\r\n            <span class=\"el-dropdown-link\">\r\n              更多\r\n            </span>\r\n            <el-dropdown-menu slot=\"dropdown\">\r\n              <el-dropdown-item>\r\n                <strong>创建时间：</strong>{{ scope.row.creatime }}\r\n              </el-dropdown-item>\r\n              <el-dropdown-item>\r\n                <strong>更新时间：</strong>{{ scope.row.updatetime }}\r\n              </el-dropdown-item>\r\n              <el-dropdown-item>\r\n                <strong>简介：</strong>{{ scope.row.introduce || '暂无简介' }}\r\n              </el-dropdown-item>\r\n              <el-dropdown-item>\r\n                <strong>邮箱：</strong>{{ scope.row.email || '暂无邮箱' }}\r\n              </el-dropdown-item>\r\n            </el-dropdown-menu>\r\n          </el-dropdown>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页 -->\r\n    <el-pagination\r\n        :current-page=\"params.pageNum\"\r\n        :page-size=\"params.pageSize\"\r\n        :total=\"total\"\r\n        @current-change=\"handlePageChange\"\r\n        layout=\"total, prev, pager, next, jumper\"\r\n        class=\"pagination\"\r\n    />\r\n\r\n    <!-- 空数据提示 -->\r\n    <div v-if=\"tableData.length === 0\" class=\"no-data\">\r\n      <p>没有找到相关数据</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";  // 假设你使用的是 axios\r\n\r\nexport default {\r\n  name: 'UserManage',\r\n  data() {\r\n    return {\r\n      tableData: [],  // 数据\r\n      total: 0,  // 总条数\r\n      params: {\r\n        pageNum: 1,  // 当前页\r\n        pageSize: 12,  // 每页条数\r\n      },\r\n      searchQuery: \"\",  // 搜索关键词\r\n    };\r\n  },\r\n  watch: {\r\n    // 监听分页参数的变化，自动加载数据\r\n    'params.pageNum'(newPage) {\r\n      this.load();\r\n    },\r\n    'params.pageSize'(newSize) {\r\n      this.load();\r\n    },\r\n    // 监听搜索关键词变化\r\n    'searchQuery'(newQuery) {\r\n      this.params.pageNum = 1;  // 搜索时重置到第一页\r\n      this.load();\r\n    },\r\n  },\r\n  methods: {\r\n    // 加载数据\r\n    async load() {\r\n      try {\r\n        const searchParams = {\r\n          ...this.params,\r\n          searchQuery: this.searchQuery  // 将搜索条件加入请求\r\n        };\r\n\r\n        console.log('请求参数:', searchParams);  // 查看请求参数\r\n\r\n        const res = await request.get('/user/InfoPage', { params: searchParams });\r\n\r\n        if (res.code === '200') {\r\n          this.tableData = res.data.list;\r\n          this.total = res.data.total;\r\n        } else {\r\n          this.$message.error('加载数据失败');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('加载数据失败');\r\n      }\r\n    },\r\n\r\n    // 分页变化处理\r\n    handlePageChange(page) {\r\n      this.params.pageNum = page;  // 更新当前页\r\n    },\r\n\r\n    // 清除搜索框时触发\r\n    handleSearchClear() {\r\n      this.searchQuery = \"\";  // 清空搜索框\r\n    },\r\n\r\n    // 搜索时触发\r\n    handleSearch() {\r\n      this.params.pageNum = 1;  // 搜索时重置到第一页\r\n      this.load();\r\n    },\r\n  },\r\n  created() {\r\n    this.load();  // 初始加载数据\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table-container {\r\n  padding: 10px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.no-data {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #888;\r\n}\r\n\r\n.el-dropdown-link {\r\n  cursor: pointer;\r\n  color: #409EFF;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"AAmEA,OAAAA,OAAA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,KAAA;MAAA;MACAC,MAAA;QACAC,OAAA;QAAA;QACAC,QAAA;MACA;MACAC,WAAA;IACA;EACA;EACAC,KAAA;IACA;IACA,gBAAAC,CAAAC,OAAA;MACA,KAAAC,IAAA;IACA;IACA,iBAAAC,CAAAC,OAAA;MACA,KAAAF,IAAA;IACA;IACA;IACA,aAAAJ,CAAAO,QAAA;MACA,KAAAV,MAAA,CAAAC,OAAA;MACA,KAAAM,IAAA;IACA;EACA;EACAI,OAAA;IACA;IACA,MAAAJ,KAAA;MACA;QACA,MAAAK,YAAA;UACA,QAAAZ,MAAA;UACAG,WAAA,OAAAA,WAAA;QACA;QAEAU,OAAA,CAAAC,GAAA,UAAAF,YAAA;;QAEA,MAAAG,GAAA,SAAApB,OAAA,CAAAqB,GAAA;UAAAhB,MAAA,EAAAY;QAAA;QAEA,IAAAG,GAAA,CAAAE,IAAA;UACA,KAAAnB,SAAA,GAAAiB,GAAA,CAAAlB,IAAA,CAAAqB,IAAA;UACA,KAAAnB,KAAA,GAAAgB,GAAA,CAAAlB,IAAA,CAAAE,KAAA;QACA;UACA,KAAAoB,QAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IAEA;IACAC,iBAAAC,IAAA;MACA,KAAAtB,MAAA,CAAAC,OAAA,GAAAqB,IAAA;IACA;IAEA;IACAC,kBAAA;MACA,KAAApB,WAAA;IACA;IAEA;IACAqB,aAAA;MACA,KAAAxB,MAAA,CAAAC,OAAA;MACA,KAAAM,IAAA;IACA;EACA;EACAkB,QAAA;IACA,KAAAlB,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}