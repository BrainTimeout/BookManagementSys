{"ast":null,"code":"import * as echarts from 'echarts';\nimport request from \"@/utils/request\"; // 确保这个路径是正确的\n\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      borrowData: [],\n      revertData: []\n    };\n  },\n  mounted() {\n    this.fetchData(); // 获取借书和还书数据\n  },\n  methods: {\n    // 获取数据\n    async fetchData() {\n      try {\n        const borrowResponse = await request.get(\"/Borrow/List\"); // 获取借书数据\n        const revertResponse = await request.get(\"/Borrow/RevertList\"); // 获取还书数据\n\n        this.borrowData = borrowResponse.data; // 假设 API 返回的格式是 { data: [...] }\n        this.revertData = revertResponse.data;\n        this.initChart(); // 数据获取后初始化图表\n      } catch (error) {\n        console.error(\"数据获取失败：\", error);\n      }\n    },\n    // 初始化图表\n    initChart() {\n      const chartDom = document.getElementById('main');\n      const myChart = echarts.init(chartDom);\n\n      // 设置图表的配置项\n      const option = {\n        title: {\n          text: '图书借还统计'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['借书', '还书']\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] // 示例日期数据\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: '借书',\n          type: 'line',\n          data: this.borrowData // 使用从 API 获取到的借书数据\n        }, {\n          name: '还书',\n          type: 'line',\n          data: this.revertData // 使用从 API 获取到的还书数据\n        }]\n      };\n      myChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["echarts","request","name","data","borrowData","revertData","mounted","fetchData","methods","borrowResponse","get","revertResponse","initChart","error","console","chartDom","document","getElementById","myChart","init","option","title","text","tooltip","trigger","legend","grid","left","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","type","boundaryGap","yAxis","series","setOption"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div id=\"main\" style=\"width: 100%; height: 600px;\"></div> <!-- 增加高度 -->\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport request from \"@/utils/request\";  // 确保这个路径是正确的\r\n\r\nexport default {\r\n  name: 'Home',\r\n  data() {\r\n    return {\r\n      borrowData: [],\r\n      revertData: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchData();  // 获取借书和还书数据\r\n  },\r\n  methods: {\r\n    // 获取数据\r\n    async fetchData() {\r\n      try {\r\n        const borrowResponse = await request.get(\"/Borrow/List\");  // 获取借书数据\r\n        const revertResponse = await request.get(\"/Borrow/RevertList\");  // 获取还书数据\r\n\r\n        this.borrowData = borrowResponse.data;  // 假设 API 返回的格式是 { data: [...] }\r\n        this.revertData = revertResponse.data;\r\n\r\n        this.initChart();  // 数据获取后初始化图表\r\n      } catch (error) {\r\n        console.error(\"数据获取失败：\", error);\r\n      }\r\n    },\r\n\r\n    // 初始化图表\r\n    initChart() {\r\n      const chartDom = document.getElementById('main');\r\n      const myChart = echarts.init(chartDom);\r\n\r\n      // 设置图表的配置项\r\n      const option = {\r\n        title: {\r\n          text: '图书借还统计'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        legend: {\r\n          data: ['借书', '还书']\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']  // 示例日期数据\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            name: '借书',\r\n            type: 'line',\r\n            data: this.borrowData  // 使用从 API 获取到的借书数据\r\n          },\r\n          {\r\n            name: '还书',\r\n            type: 'line',\r\n            data: this.revertData  // 使用从 API 获取到的还书数据\r\n          }\r\n        ]\r\n      };\r\n\r\n      myChart.setOption(option);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#main {\r\n  width: 100%;\r\n  height: 600px; /* 修改为更高的值 */\r\n}\r\n</style>\r\n"],"mappings":"AAKA,YAAAA,OAAA;AACA,OAAAC,OAAA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAD,UAAA;MACA;QACA,MAAAE,cAAA,SAAAR,OAAA,CAAAS,GAAA;QACA,MAAAC,cAAA,SAAAV,OAAA,CAAAS,GAAA;;QAEA,KAAAN,UAAA,GAAAK,cAAA,CAAAN,IAAA;QACA,KAAAE,UAAA,GAAAM,cAAA,CAAAR,IAAA;QAEA,KAAAS,SAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;MACA;IACA;IAEA;IACAD,UAAA;MACA,MAAAG,QAAA,GAAAC,QAAA,CAAAC,cAAA;MACA,MAAAC,OAAA,GAAAlB,OAAA,CAAAmB,IAAA,CAAAJ,QAAA;;MAEA;MACA,MAAAK,MAAA;QACAC,KAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;QACA;QACAC,MAAA;UACAtB,IAAA;QACA;QACAuB,IAAA;UACAC,IAAA;UACAC,KAAA;UACAC,MAAA;UACAC,YAAA;QACA;QACAC,OAAA;UACAC,OAAA;YACAC,WAAA;UACA;QACA;QACAC,KAAA;UACAC,IAAA;UACAC,WAAA;UACAjC,IAAA;QACA;QACAkC,KAAA;UACAF,IAAA;QACA;QACAG,MAAA,GACA;UACApC,IAAA;UACAiC,IAAA;UACAhC,IAAA,OAAAC,UAAA;QACA,GACA;UACAF,IAAA;UACAiC,IAAA;UACAhC,IAAA,OAAAE,UAAA;QACA;MAEA;MAEAa,OAAA,CAAAqB,SAAA,CAAAnB,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}